/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OracleProvider,
  OracleProviderInterface,
} from "../OracleProvider";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "base",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "registry",
        type: "address",
      },
    ],
    name: "AddOracle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "USDUnderlying",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "base",
        type: "address",
      },
      {
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    name: "addOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "getPairUSDPrice",
    outputs: [
      {
        internalType: "int256",
        name: "price0",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "price1",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getUSDPrice",
    outputs: [
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "base",
            type: "address",
          },
          {
            internalType: "address",
            name: "quote",
            type: "address",
          },
          {
            internalType: "address",
            name: "registry",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "decimals",
            type: "uint256",
          },
        ],
        internalType: "struct OracleProvider.InitParam[]",
        name: "params",
        type: "tuple[]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "oracles",
    outputs: [
      {
        internalType: "address",
        name: "base",
        type: "address",
      },
      {
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        internalType: "address",
        name: "registry",
        type: "address",
      },
      {
        internalType: "bool",
        name: "available",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611123806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806303f93e5f1461008857806352a03c03146100b25780636354d06a146100d6578063715018a6146100eb57806372471e1f146100f55780638b2f0f4f146101085780638da5cb5b14610128578063d325685f14610130578063f2fde38b14610143575b600080fd5b61009b610096366004610e82565b610156565b6040516100a9929190611030565b60405180910390f35b6100c56100c0366004610e82565b610176565b6040516100a9959493929190610ff3565b6100de6101c2565b6040516100a99190610fb4565b6100f36101c8565b005b6100f3610103366004610ef5565b610262565b61011b610116366004610e68565b6104d2565b6040516100a99190611027565b6100de610875565b6100f361013e366004610eab565b610884565b6100f3610151366004610e68565b610a28565b600080610162846104d2565b915061016d836104d2565b90509250929050565b606560209081526000928352604080842090915290825290208054600182015460028301546003909301546001600160a01b039283169391831692821691600160a01b900460ff169085565b61034890565b6101d0610b19565b6001600160a01b03166101e1610875565b6001600160a01b03161461022a576040805162461bcd60e51b815260206004820181905260248201526000805160206110d7833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316906000805160206110f7833981519152908390a3603380546001600160a01b0319169055565b600054610100900460ff168061027b575061027b610b1d565b80610289575060005460ff16155b6102c45760405162461bcd60e51b815260040180806020018281038252602e815260200180611088602e913960400191505060405180910390fd5b600054610100900460ff161580156102ef576000805460ff1961ff0019909116610100171660011790555b60005b828110156104b2576040518060a0016040528085858481811061031157fe5b6103279260206080909202019081019150610e68565b6001600160a01b0316815260200185858481811061034157fe5b90506080020160200160208101906103599190610e68565b6001600160a01b0316815260200185858481811061037357fe5b905060800201604001602081019061038b9190610e68565b6001600160a01b03168152600160208201526040018585848181106103ac57fe5b90506080020160600135815250606560008686858181106103c957fe5b6103df9260206080909202019081019150610e68565b6001600160a01b03166001600160a01b03168152602001908152602001600020600086868581811061040d57fe5b90506080020160200160208101906104259190610e68565b6001600160a01b0390811682526020808301939093526040918201600020845181549083166001600160a01b03199182161782559385015160018083018054928516928716929092179091559285015160028201805460608801511515600160a01b0260ff60a01b19939095169616959095171691909117909255608090920151600390910155016102f2565b506104bb610b2e565b80156104cd576000805461ff00191690555b505050565b6001600160a01b03818116600090815260656020908152604080832061034884528252808320815160a081018352815486168152600180830154871694820194909452600282015495861692810192909252600160a01b90940460ff161515606082018190526003909401546080820152919214156105cd5780604001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561058857600080fd5b505afa15801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190610f65565b5091945061086f92505050565b6001600160a01b03808416600090815260656020908152604080832073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee84528252808320815160a08082018452825487168252600183015487168286015260028301548088168386015260ff600160a01b918290048116151560608086019182526003909601546080808701919091526103489099527f257405f99fe2d6fe0ce719600dcd9061285695d9bfa0763a142fa64f3756009f8852865193840187527f5bdf3a1bad7a7b4fae57f8d7762a9cfaa4239442c7e10ae3664076d953189cf8548a1684527f5bdf3a1bad7a7b4fae57f8d7762a9cfaa4239442c7e10ae3664076d953189cf9548a16978401979097527f5bdf3a1bad7a7b4fae57f8d7762a9cfaa4239442c7e10ae3664076d953189cfa54988916958301959095529096049092161515908501527f5bdf3a1bad7a7b4fae57f8d7762a9cfaa4239442c7e10ae3664076d953189cfb5492840192909252519091908015610744575080606001515b1561086c57600082604001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561078857600080fd5b505afa15801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190610f65565b505050915050600082604001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561080557600080fd5b505afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190610f65565b505050915050610867816108618660800151600a0a85610be090919063ffffffff16565b90610c46565b955050505b50505b50919050565b6033546001600160a01b031690565b61088c610b19565b6001600160a01b031661089d610875565b6001600160a01b0316146108e6576040805162461bcd60e51b815260206004820181905260248201526000805160206110d7833981519152604482015290519081900360640190fd5b6001600160a01b038481166000908152606560209081526040808320878516845290915290206002015416156109375760405162461bcd60e51b815260040161092e9061103e565b60405180910390fd5b6040805160a0810182526001600160a01b038087168083528682166020808501828152888516868801908152600160608801818152608089018b81526000978852606586528a88209688529590945294889020965187549087166001600160a01b03199182161788559151948701805495871695831695909517909455925160028601805492511515600160a01b0260ff60a01b199290961692909416919091171692909217905551600390910155517f151e9b5c329cba5a1f5358bcc3a831cd16cef0de3bebd377b02f41ce64d442fe90610a1a903390879087908790610fc8565b60405180910390a150505050565b610a30610b19565b6001600160a01b0316610a41610875565b6001600160a01b031614610a8a576040805162461bcd60e51b815260206004820181905260248201526000805160206110d7833981519152604482015290519081900360640190fd5b6001600160a01b038116610acf5760405162461bcd60e51b81526004018080602001828103825260268152602001806110626026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216906000805160206110f783398151915290600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000610b2830610ca6565b15905090565b600054610100900460ff1680610b475750610b47610b1d565b80610b55575060005460ff16155b610b905760405162461bcd60e51b815260040180806020018281038252602e815260200180611088602e913960400191505060405180910390fd5b600054610100900460ff16158015610bbb576000805460ff1961ff0019909116610100171660011790555b610bc3610cb0565b610bcb610d50565b8015610bdd576000805461ff00191690555b50565b6000808211610c33576040805162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015290519081900360640190fd5b818381610c3c57fe5b0490505b92915050565b600082610c5557506000610c40565b82820282848281610c6257fe5b0414610c9f5760405162461bcd60e51b81526004018080602001828103825260218152602001806110b66021913960400191505060405180910390fd5b9392505050565b803b15155b919050565b600054610100900460ff1680610cc95750610cc9610b1d565b80610cd7575060005460ff16155b610d125760405162461bcd60e51b815260040180806020018281038252602e815260200180611088602e913960400191505060405180910390fd5b600054610100900460ff16158015610bcb576000805460ff1961ff0019909116610100171660011790558015610bdd576000805461ff001916905550565b600054610100900460ff1680610d695750610d69610b1d565b80610d77575060005460ff16155b610db25760405162461bcd60e51b815260040180806020018281038252602e815260200180611088602e913960400191505060405180910390fd5b600054610100900460ff16158015610ddd576000805460ff1961ff0019909116610100171660011790555b6000610de7610b19565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000906000805160206110f7833981519152908290a3508015610bdd576000805461ff001916905550565b80356001600160a01b0381168114610cab57600080fd5b805169ffffffffffffffffffff81168114610cab57600080fd5b600060208284031215610e79578081fd5b610c9f82610e37565b60008060408385031215610e94578081fd5b610e9d83610e37565b915061016d60208401610e37565b60008060008060808587031215610ec0578182fd5b610ec985610e37565b9350610ed760208601610e37565b9250610ee560408601610e37565b9396929550929360600135925050565b60008060208385031215610f07578182fd5b823567ffffffffffffffff80821115610f1e578384fd5b818501915085601f830112610f31578384fd5b813581811115610f3f578485fd5b866020608083028501011115610f53578485fd5b60209290920196919550909350505050565b600080600080600060a08688031215610f7c578081fd5b610f8586610e4e565b9450602086015193506040860151925060608601519150610fa860808701610e4e565b90509295509295909350565b6001600160a01b0391909116815260200190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03958616815293851660208501529190931660408301529115156060820152608081019190915260a00190565b90815260200190565b918252602082015260400190565b6020808252600990820152686475706c696361746560b81b60408201526060019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a164736f6c6343000706000a";

export class OracleProvider__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleProvider> {
    return super.deploy(overrides || {}) as Promise<OracleProvider>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OracleProvider {
    return super.attach(address) as OracleProvider;
  }
  connect(signer: Signer): OracleProvider__factory {
    return super.connect(signer) as OracleProvider__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleProviderInterface {
    return new utils.Interface(_abi) as OracleProviderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleProvider {
    return new Contract(address, _abi, signerOrProvider) as OracleProvider;
  }
}
