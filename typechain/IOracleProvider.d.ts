/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOracleProviderInterface extends ethers.utils.Interface {
  functions: {
    "addOracle(address,address,address,uint256)": FunctionFragment;
    "getPairUSDPrice(address,address)": FunctionFragment;
    "getUSDPrice(address)": FunctionFragment;
    "oracles(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOracle",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairUSDPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getUSDPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairUSDPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;

  events: {
    "AddOracle(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOracle"): EventFragment;
}

export type AddOracleEvent = TypedEvent<
  [string, string, string, string] & {
    account: string;
    base: string;
    quote: string;
    registry: string;
  }
>;

export class IOracleProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOracleProviderInterface;

  functions: {
    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUSDPrice(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    oracles(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber] & {
        _base: string;
        _quote: string;
        registry: string;
        available: boolean;
        decimals: BigNumber;
      }
    >;
  };

  addOracle(
    base: string,
    quote: string,
    registry: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPairUSDPrice(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getUSDPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  oracles(
    base: string,
    quote: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber] & {
      _base: string;
      _quote: string;
      registry: string;
      available: boolean;
      decimals: BigNumber;
    }
  >;

  callStatic: {
    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getUSDPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracles(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber] & {
        _base: string;
        _quote: string;
        registry: string;
        available: boolean;
        decimals: BigNumber;
      }
    >;
  };

  filters: {
    "AddOracle(address,address,address,address)"(
      account?: null,
      base?: null,
      quote?: null,
      registry?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { account: string; base: string; quote: string; registry: string }
    >;

    AddOracle(
      account?: null,
      base?: null,
      quote?: null,
      registry?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { account: string; base: string; quote: string; registry: string }
    >;
  };

  estimateGas: {
    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    oracles(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracles(
      base: string,
      quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
