/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRewardPoolInterface extends ethers.utils.Interface {
  functions: {
    "earned(uint256,uint256)": FunctionFragment;
    "getReward(uint256,uint256)": FunctionFragment;
    "notifyLastUpdateTimes(uint256)": FunctionFragment;
    "shares(uint256,uint256)": FunctionFragment;
    "totalShares(uint256)": FunctionFragment;
    "transferToRewardPool(uint256)": FunctionFragment;
    "updateRewardFromCHI(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "earned",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyLastUpdateTimes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToRewardPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardFromCHI",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyLastUpdateTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardFromCHI",
    data: BytesLike
  ): Result;

  events: {
    "RewardAdded(uint256)": EventFragment;
    "RewardLastUpdateTime(uint256,uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "RewardSetCHIManager(address,address)": EventFragment;
    "RewardUpdateRate(uint256,uint256)": EventFragment;
    "RewardUpdated(uint256,uint256)": EventFragment;
    "RewardsDurationUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardLastUpdateTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardSetCHIManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardUpdateRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
}

export type RewardAddedEvent = TypedEvent<[BigNumber] & { reward: BigNumber }>;

export type RewardLastUpdateTimeEvent = TypedEvent<
  [BigNumber, BigNumber] & { tokenId: BigNumber; timestamp: BigNumber }
>;

export type RewardPaidEvent = TypedEvent<
  [string, BigNumber] & { user: string; reward: BigNumber }
>;

export type RewardSetCHIManagerEvent = TypedEvent<
  [string, string] & { oldAddr: string; newAddr: string }
>;

export type RewardUpdateRateEvent = TypedEvent<
  [BigNumber, BigNumber] & { oldRate: BigNumber; newRate: BigNumber }
>;

export type RewardUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { yangId: BigNumber; chiId: BigNumber }
>;

export type RewardsDurationUpdatedEvent = TypedEvent<
  [BigNumber] & { newDuration: BigNumber }
>;

export class IRewardPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRewardPoolInterface;

  functions: {
    earned(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReward(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    notifyLastUpdateTimes(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shares(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalShares(
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferToRewardPool(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardFromCHI(
      yangId: BigNumberish,
      chiId: BigNumberish,
      _shares_: BigNumberish,
      _totalShares_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  earned(
    yangId: BigNumberish,
    chiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReward(
    yangId: BigNumberish,
    chiId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  notifyLastUpdateTimes(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shares(
    yangId: BigNumberish,
    chiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalShares(
    chiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferToRewardPool(
    reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardFromCHI(
    yangId: BigNumberish,
    chiId: BigNumberish,
    _shares_: BigNumberish,
    _totalShares_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    earned(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyLastUpdateTimes(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shares(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToRewardPool(
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardFromCHI(
      yangId: BigNumberish,
      chiId: BigNumberish,
      _shares_: BigNumberish,
      _totalShares_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RewardAdded(uint256)"(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    RewardAdded(
      reward?: null
    ): TypedEventFilter<[BigNumber], { reward: BigNumber }>;

    "RewardLastUpdateTime(uint256,uint256)"(
      tokenId?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; timestamp: BigNumber }
    >;

    RewardLastUpdateTime(
      tokenId?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tokenId: BigNumber; timestamp: BigNumber }
    >;

    "RewardPaid(address,uint256)"(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    RewardPaid(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; reward: BigNumber }
    >;

    "RewardSetCHIManager(address,address)"(
      oldAddr?: null,
      newAddr?: null
    ): TypedEventFilter<[string, string], { oldAddr: string; newAddr: string }>;

    RewardSetCHIManager(
      oldAddr?: null,
      newAddr?: null
    ): TypedEventFilter<[string, string], { oldAddr: string; newAddr: string }>;

    "RewardUpdateRate(uint256,uint256)"(
      oldRate?: null,
      newRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRate: BigNumber; newRate: BigNumber }
    >;

    RewardUpdateRate(
      oldRate?: null,
      newRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { oldRate: BigNumber; newRate: BigNumber }
    >;

    "RewardUpdated(uint256,uint256)"(
      yangId?: null,
      chiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { yangId: BigNumber; chiId: BigNumber }
    >;

    RewardUpdated(
      yangId?: null,
      chiId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { yangId: BigNumber; chiId: BigNumber }
    >;

    "RewardsDurationUpdated(uint256)"(
      newDuration?: null
    ): TypedEventFilter<[BigNumber], { newDuration: BigNumber }>;

    RewardsDurationUpdated(
      newDuration?: null
    ): TypedEventFilter<[BigNumber], { newDuration: BigNumber }>;
  };

  estimateGas: {
    earned(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    notifyLastUpdateTimes(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shares(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalShares(
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToRewardPool(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardFromCHI(
      yangId: BigNumberish,
      chiId: BigNumberish,
      _shares_: BigNumberish,
      _totalShares_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    earned(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    notifyLastUpdateTimes(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shares(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToRewardPool(
      reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardFromCHI(
      yangId: BigNumberish,
      chiId: BigNumberish,
      _shares_: BigNumberish,
      _totalShares_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
