/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OracleProviderInterface extends ethers.utils.Interface {
  functions: {
    "USDUnderlying()": FunctionFragment;
    "addOracle(address,address,address,uint256)": FunctionFragment;
    "getPairUSDPrice(address,address)": FunctionFragment;
    "getUSDPrice(address)": FunctionFragment;
    "initialize(tuple[])": FunctionFragment;
    "oracles(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "USDUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOracle",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairUSDPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getUSDPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        base: string;
        quote: string;
        registry: string;
        decimals: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracles",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "USDUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairUSDPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddOracle(address,address,address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class OracleProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OracleProviderInterface;

  functions: {
    USDUnderlying(overrides?: CallOverrides): Promise<[string]>;

    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price0: BigNumber; price1: BigNumber }
    >;

    getUSDPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    initialize(
      params: {
        base: string;
        quote: string;
        registry: string;
        decimals: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber] & {
        base: string;
        quote: string;
        registry: string;
        available: boolean;
        decimals: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  USDUnderlying(overrides?: CallOverrides): Promise<string>;

  addOracle(
    base: string,
    quote: string,
    registry: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPairUSDPrice(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { price0: BigNumber; price1: BigNumber }>;

  getUSDPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    params: {
      base: string;
      quote: string;
      registry: string;
      decimals: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracles(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber] & {
      base: string;
      quote: string;
      registry: string;
      available: boolean;
      decimals: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    USDUnderlying(overrides?: CallOverrides): Promise<string>;

    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { price0: BigNumber; price1: BigNumber }
    >;

    getUSDPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: {
        base: string;
        quote: string;
        registry: string;
        decimals: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber] & {
        base: string;
        quote: string;
        registry: string;
        available: boolean;
        decimals: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddOracle(
      account?: null,
      base?: null,
      quote?: null,
      registry?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { account: string; base: string; quote: string; registry: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    USDUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: {
        base: string;
        quote: string;
        registry: string;
        decimals: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    USDUnderlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOracle(
      base: string,
      quote: string,
      registry: string,
      decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPairUSDPrice(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      params: {
        base: string;
        quote: string;
        registry: string;
        decimals: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracles(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
