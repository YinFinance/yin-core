/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ICHIManagerInterface extends ethers.utils.Interface {
  functions: {
    "CHIDepositCallback(address,uint256,address,uint256,address)": FunctionFragment;
    "addAllLiquidityToPosition(uint256,uint256[],uint256[],uint256[])": FunctionFragment;
    "addAndRemoveRanges(uint256,tuple[],tuple[])": FunctionFragment;
    "archivedCHI(uint256)": FunctionFragment;
    "chi(uint256)": FunctionFragment;
    "chiVault(uint256)": FunctionFragment;
    "collectProtocol(uint256)": FunctionFragment;
    "config(uint256)": FunctionFragment;
    "emergencyBurn(uint256,int24,int24)": FunctionFragment;
    "mint(tuple,bytes32[])": FunctionFragment;
    "pausedCHI(uint256)": FunctionFragment;
    "removeRangesAllLiquidityFromPosition(uint256,uint256[])": FunctionFragment;
    "removeRangesLiquidityFromPosition(uint256,uint256[],uint128[])": FunctionFragment;
    "subscribe(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "subscribeSingle(uint256,uint256,bool,uint256,uint256,uint256)": FunctionFragment;
    "swap(uint256,tuple)": FunctionFragment;
    "sweep(uint256,address,address)": FunctionFragment;
    "unpausedCHI(uint256)": FunctionFragment;
    "unsubscribe(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "unsubscribeSingle(uint256,uint256,bool,uint256,uint256)": FunctionFragment;
    "yang(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CHIDepositCallback",
    values: [string, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAllLiquidityToPosition",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addAndRemoveRanges",
    values: [
      BigNumberish,
      { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      { tickLower: BigNumberish; tickUpper: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "archivedCHI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chi", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "chiVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "config",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyBurn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      { recipient: string; token0: string; token1: string; fee: BigNumberish },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pausedCHI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRangesAllLiquidityFromPosition",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRangesLiquidityFromPosition",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeSingle",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      BigNumberish,
      {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unpausedCHI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeSingle",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yang",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHIDepositCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllLiquidityToPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAndRemoveRanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "archivedCHI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chiVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausedCHI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRangesAllLiquidityFromPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRangesLiquidityFromPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpausedCHI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yang", data: BytesLike): Result;

  events: {
    "AddAllLiquidityToPositionEvent(address,uint256,uint256[],uint256[],uint256[])": EventFragment;
    "AddLiquidityToPositionEvent(address,uint256,uint256,uint256,uint256)": EventFragment;
    "ChangeLiquidity(uint256,address)": EventFragment;
    "Create(uint256,address,address,uint256)": EventFragment;
    "EmergencyBurn(address,uint256,int24,int24)": EventFragment;
    "RemoveAllLiquidityFromPositionEvent(address,uint256,uint256)": EventFragment;
    "RemoveLiquidityFromPositionEvent(address,uint256,uint256,uint128)": EventFragment;
    "Swap(uint256,address,address,uint256,uint256)": EventFragment;
    "Sweep(address,address,address,uint256)": EventFragment;
    "UpdateDeployer(address,address,address)": EventFragment;
    "UpdateExecutor(address,address,address)": EventFragment;
    "UpdateGovernance(address,address,address)": EventFragment;
    "UpdateMaxUSDLimit(address,uint256,uint256)": EventFragment;
    "UpdateMerkleRoot(address,bytes32,bytes32)": EventFragment;
    "UpdateProviderFee(address,uint256,uint256)": EventFragment;
    "UpdateRewardPool(address,address,address)": EventFragment;
    "UpdateVaultFee(address,uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AddAllLiquidityToPositionEvent"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddLiquidityToPositionEvent"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Create"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyBurn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveAllLiquidityFromPositionEvent"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveLiquidityFromPositionEvent"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sweep"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDeployer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExecutor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMaxUSDLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMerkleRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateProviderFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateVaultFee"): EventFragment;
}

export class ICHIManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICHIManagerInterface;

  functions: {
    CHIDepositCallback(
      token0: string,
      amount0: BigNumberish,
      token1: string,
      amount1: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAllLiquidityToPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      amount0Totals: BigNumberish[],
      amount1Totals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAndRemoveRanges(
      tokenId: BigNumberish,
      addRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      removeRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    archivedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chi(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        owner: string;
        operator: string;
        pool: string;
        vault: string;
        accruedProtocolFees0: BigNumber;
        accruedProtocolFees1: BigNumber;
        fee: number;
        totalShares: BigNumber;
      }
    >;

    chiVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        collect0: BigNumber;
        collect1: BigNumber;
      }
    >;

    collectProtocol(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    config(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isPaused: boolean;
        isArchived: boolean;
        maxUSDLimit: BigNumber;
      }
    >;

    emergencyBurn(
      tokenId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      params: {
        recipient: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
      },
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pausedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRangesAllLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRangesLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      liquidities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenId: BigNumberish,
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweep(
      tokenId: BigNumberish,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpausedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsubscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsubscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yang(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;
  };

  CHIDepositCallback(
    token0: string,
    amount0: BigNumberish,
    token1: string,
    amount1: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAllLiquidityToPosition(
    tokenId: BigNumberish,
    ranges: BigNumberish[],
    amount0Totals: BigNumberish[],
    amount1Totals: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAndRemoveRanges(
    tokenId: BigNumberish,
    addRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
    removeRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  archivedCHI(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chi(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      number,
      BigNumber
    ] & {
      owner: string;
      operator: string;
      pool: string;
      vault: string;
      accruedProtocolFees0: BigNumber;
      accruedProtocolFees1: BigNumber;
      fee: number;
      totalShares: BigNumber;
    }
  >;

  chiVault(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount0: BigNumber;
      amount1: BigNumber;
      collect0: BigNumber;
      collect1: BigNumber;
    }
  >;

  collectProtocol(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  config(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      isPaused: boolean;
      isArchived: boolean;
      maxUSDLimit: BigNumber;
    }
  >;

  emergencyBurn(
    tokenId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    params: {
      recipient: string;
      token0: string;
      token1: string;
      fee: BigNumberish;
    },
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pausedCHI(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRangesAllLiquidityFromPosition(
    tokenId: BigNumberish,
    ranges: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRangesLiquidityFromPosition(
    tokenId: BigNumberish,
    ranges: BigNumberish[],
    liquidities: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    yangId: BigNumberish,
    tokenId: BigNumberish,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscribeSingle(
    yangId: BigNumberish,
    tokenId: BigNumberish,
    zeroForOne: boolean,
    exactAmount: BigNumberish,
    maxTokenAmount: BigNumberish,
    minShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenId: BigNumberish,
    params: {
      tokenIn: string;
      tokenOut: string;
      interval: BigNumberish;
      slippageTolerance: BigNumberish;
      percentage: BigNumberish;
      sqrtRatioX96: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweep(
    tokenId: BigNumberish,
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpausedCHI(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsubscribe(
    yangId: BigNumberish,
    tokenId: BigNumberish,
    shares: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsubscribeSingle(
    yangId: BigNumberish,
    tokenId: BigNumberish,
    zeroForOne: boolean,
    shares: BigNumberish,
    amountOutMin: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yang(
    yangId: BigNumberish,
    chiId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    CHIDepositCallback(
      token0: string,
      amount0: BigNumberish,
      token1: string,
      amount1: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addAllLiquidityToPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      amount0Totals: BigNumberish[],
      amount1Totals: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addAndRemoveRanges(
      tokenId: BigNumberish,
      addRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      removeRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    archivedCHI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chi(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        number,
        BigNumber
      ] & {
        owner: string;
        operator: string;
        pool: string;
        vault: string;
        accruedProtocolFees0: BigNumber;
        accruedProtocolFees1: BigNumber;
        fee: number;
        totalShares: BigNumber;
      }
    >;

    chiVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        collect0: BigNumber;
        collect1: BigNumber;
      }
    >;

    collectProtocol(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    config(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        isPaused: boolean;
        isArchived: boolean;
        maxUSDLimit: BigNumber;
      }
    >;

    emergencyBurn(
      tokenId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      params: {
        recipient: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
      },
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { tokenId: BigNumber; vault: string }>;

    pausedCHI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeRangesAllLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeRangesLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      liquidities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    subscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    swap(
      tokenId: BigNumberish,
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sweep(
      tokenId: BigNumberish,
      token: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpausedCHI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unsubscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    unsubscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yang(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AddAllLiquidityToPositionEvent(
      account?: null,
      tokenId?: null,
      ranges?: null,
      amount0Totals?: null,
      amount1Totals?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber[], BigNumber[], BigNumber[]],
      {
        account: string;
        tokenId: BigNumber;
        ranges: BigNumber[];
        amount0Totals: BigNumber[];
        amount1Totals: BigNumber[];
      }
    >;

    AddLiquidityToPositionEvent(
      account?: null,
      tokenId?: null,
      rangeIndex?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        tokenId: BigNumber;
        rangeIndex: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    ChangeLiquidity(
      tokenId?: null,
      vault?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; vault: string }
    >;

    Create(
      tokenId?: null,
      pool?: null,
      vault?: null,
      vaultFee?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      { tokenId: BigNumber; pool: string; vault: string; vaultFee: BigNumber }
    >;

    EmergencyBurn(
      account?: null,
      tokenId?: null,
      tickLower?: null,
      tickUpper?: null
    ): TypedEventFilter<
      [string, BigNumber, number, number],
      {
        account: string;
        tokenId: BigNumber;
        tickLower: number;
        tickUpper: number;
      }
    >;

    RemoveAllLiquidityFromPositionEvent(
      account?: null,
      tokenId?: null,
      rangeIndex?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; tokenId: BigNumber; rangeIndex: BigNumber }
    >;

    RemoveLiquidityFromPositionEvent(
      account?: null,
      tokenId?: null,
      rangeIndex?: null,
      liquidity?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        account: string;
        tokenId: BigNumber;
        rangeIndex: BigNumber;
        liquidity: BigNumber;
      }
    >;

    Swap(
      tokenId?: null,
      tokenIn?: null,
      tokenOut?: null,
      percentage?: null,
      amountOut?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        tokenIn: string;
        tokenOut: string;
        percentage: BigNumber;
        amountOut: BigNumber;
      }
    >;

    Sweep(
      account?: null,
      recipient?: null,
      token?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { account: string; recipient: string; token: string; tokenId: BigNumber }
    >;

    UpdateDeployer(
      account?: null,
      oldDeployer?: null,
      newDeployer?: null
    ): TypedEventFilter<
      [string, string, string],
      { account: string; oldDeployer: string; newDeployer: string }
    >;

    UpdateExecutor(
      account?: null,
      oldExecutor?: null,
      newExecutor?: null
    ): TypedEventFilter<
      [string, string, string],
      { account: string; oldExecutor: string; newExecutor: string }
    >;

    UpdateGovernance(
      account?: null,
      oldGovernance?: null,
      newGovernance?: null
    ): TypedEventFilter<
      [string, string, string],
      { account: string; oldGovernance: string; newGovernance: string }
    >;

    UpdateMaxUSDLimit(
      account?: null,
      oldMaxUSDLimit?: null,
      newMaxUSDLimit?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; oldMaxUSDLimit: BigNumber; newMaxUSDLimit: BigNumber }
    >;

    UpdateMerkleRoot(
      account?: null,
      oldMerkleRoot?: null,
      newMerkleRoot?: null
    ): TypedEventFilter<
      [string, string, string],
      { account: string; oldMerkleRoot: string; newMerkleRoot: string }
    >;

    UpdateProviderFee(
      account?: null,
      oldProviderFee?: null,
      newProviderFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; oldProviderFee: BigNumber; newProviderFee: BigNumber }
    >;

    UpdateRewardPool(
      account?: null,
      oldRewardPool?: null,
      newRewardPool?: null
    ): TypedEventFilter<
      [string, string, string],
      { account: string; oldRewardPool: string; newRewardPool: string }
    >;

    UpdateVaultFee(
      account?: null,
      oldVaultFee?: null,
      newVaultFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { account: string; oldVaultFee: BigNumber; newVaultFee: BigNumber }
    >;
  };

  estimateGas: {
    CHIDepositCallback(
      token0: string,
      amount0: BigNumberish,
      token1: string,
      amount1: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAllLiquidityToPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      amount0Totals: BigNumberish[],
      amount1Totals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAndRemoveRanges(
      tokenId: BigNumberish,
      addRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      removeRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    archivedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chi(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    chiVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectProtocol(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    config(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyBurn(
      tokenId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      params: {
        recipient: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
      },
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pausedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRangesAllLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRangesLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      liquidities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      tokenId: BigNumberish,
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweep(
      tokenId: BigNumberish,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpausedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsubscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsubscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yang(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHIDepositCallback(
      token0: string,
      amount0: BigNumberish,
      token1: string,
      amount1: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAllLiquidityToPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      amount0Totals: BigNumberish[],
      amount1Totals: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAndRemoveRanges(
      tokenId: BigNumberish,
      addRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      removeRanges: { tickLower: BigNumberish; tickUpper: BigNumberish }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    archivedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chi(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chiVault(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectProtocol(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    config(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyBurn(
      tokenId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      params: {
        recipient: string;
        token0: string;
        token1: string;
        fee: BigNumberish;
      },
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pausedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRangesAllLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRangesLiquidityFromPosition(
      tokenId: BigNumberish,
      ranges: BigNumberish[],
      liquidities: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenId: BigNumberish,
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      tokenId: BigNumberish,
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpausedCHI(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsubscribeSingle(
      yangId: BigNumberish,
      tokenId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yang(
      yangId: BigNumberish,
      chiId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
