/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CHIVaultInterface extends ethers.utils.Interface {
  functions: {
    "CHIManager()": FunctionFragment;
    "accruedCollectFees0()": FunctionFragment;
    "accruedCollectFees1()": FunctionFragment;
    "accruedProtocolFees0()": FunctionFragment;
    "accruedProtocolFees1()": FunctionFragment;
    "addLiquidityToPosition(uint256,uint256,uint256)": FunctionFragment;
    "addRange(int24,int24)": FunctionFragment;
    "balanceToken0()": FunctionFragment;
    "balanceToken1()": FunctionFragment;
    "collectProtocol(uint256,uint256,address)": FunctionFragment;
    "deposit(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositSingle(uint256,bool,uint256,uint256,uint256)": FunctionFragment;
    "emergencyBurn(int24,int24)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeTier()": FunctionFragment;
    "getRange(uint256)": FunctionFragment;
    "getRangeCount()": FunctionFragment;
    "getTotalAmounts()": FunctionFragment;
    "getTotalLiquidityAmounts()": FunctionFragment;
    "harvestFee()": FunctionFragment;
    "pool()": FunctionFragment;
    "positionAmounts(int24,int24)": FunctionFragment;
    "removeAllLiquidityFromPosition(uint256)": FunctionFragment;
    "removeLiquidityFromPosition(uint256,uint128)": FunctionFragment;
    "removeRange(int24,int24)": FunctionFragment;
    "router()": FunctionFragment;
    "swapPercentage((address,address,uint32,uint16,uint256,uint160))": FunctionFragment;
    "sweep(address,address)": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "uniswapV3MintCallback(uint256,uint256,bytes)": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
    "withdraw(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "withdrawSingle(uint256,bool,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CHIManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedCollectFees0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedCollectFees1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedProtocolFees0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedProtocolFees1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityToPosition",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceToken1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocol",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSingle",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyBurn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRangeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLiquidityAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllLiquidityFromPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityFromPosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapPercentage",
    values: [
      {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3MintCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSingle",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "CHIManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accruedCollectFees0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedCollectFees1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedProtocolFees0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedProtocolFees1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityToPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceToken1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRange", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRangeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLiquidityAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvestFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllLiquidityFromPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityFromPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3MintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSingle",
    data: BytesLike
  ): Result;

  events: {
    "CollectFee(uint256,uint256)": EventFragment;
    "Deposit(uint256,uint256,uint256,uint256)": EventFragment;
    "Swap(address,address,uint256,uint256,uint256)": EventFragment;
    "Withdraw(uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type CollectFeeEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    feesFromPool0: BigNumber;
    feesFromPool1: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    yangId: BigNumber;
    shares: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    from: string;
    to: string;
    amountIn: BigNumber;
    amountOut: BigNumber;
    amountOutMin: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber] & {
    yangId: BigNumber;
    to: string;
    shares: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export class CHIVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CHIVaultInterface;

  functions: {
    CHIManager(overrides?: CallOverrides): Promise<[string]>;

    accruedCollectFees0(overrides?: CallOverrides): Promise<[BigNumber]>;

    accruedCollectFees1(overrides?: CallOverrides): Promise<[BigNumber]>;

    accruedProtocolFees0(overrides?: CallOverrides): Promise<[BigNumber]>;

    accruedProtocolFees1(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidityToPosition(
      rangeIndex: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceToken0(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceToken1(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectProtocol(
      amount0: BigNumberish,
      amount1: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      yangId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyBurn(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[number]>;

    feeTier(overrides?: CallOverrides): Promise<[number]>;

    getRange(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tickLower: number; tickUpper: number }>;

    getRangeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }
    >;

    getTotalLiquidityAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }
    >;

    harvestFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    positionAmounts(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    removeAllLiquidityFromPosition(
      rangeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityFromPosition(
      rangeIndex: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    swapPercentage(
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweep(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      yangId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CHIManager(overrides?: CallOverrides): Promise<string>;

  accruedCollectFees0(overrides?: CallOverrides): Promise<BigNumber>;

  accruedCollectFees1(overrides?: CallOverrides): Promise<BigNumber>;

  accruedProtocolFees0(overrides?: CallOverrides): Promise<BigNumber>;

  accruedProtocolFees1(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidityToPosition(
    rangeIndex: BigNumberish,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRange(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceToken0(overrides?: CallOverrides): Promise<BigNumber>;

  balanceToken1(overrides?: CallOverrides): Promise<BigNumber>;

  collectProtocol(
    amount0: BigNumberish,
    amount1: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    yangId: BigNumberish,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositSingle(
    yangId: BigNumberish,
    zeroForOne: boolean,
    exactAmount: BigNumberish,
    maxTokenAmount: BigNumberish,
    minShares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyBurn(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<number>;

  feeTier(overrides?: CallOverrides): Promise<number>;

  getRange(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number] & { tickLower: number; tickUpper: number }>;

  getRangeCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalAmounts(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }>;

  getTotalLiquidityAmounts(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }>;

  harvestFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pool(overrides?: CallOverrides): Promise<string>;

  positionAmounts(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >;

  removeAllLiquidityFromPosition(
    rangeIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityFromPosition(
    rangeIndex: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRange(
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  swapPercentage(
    params: {
      tokenIn: string;
      tokenOut: string;
      interval: BigNumberish;
      slippageTolerance: BigNumberish;
      percentage: BigNumberish;
      sqrtRatioX96: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweep(
    token: string,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV3MintCallback(
    amount0Owed: BigNumberish,
    amount1Owed: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    yangId: BigNumberish,
    shares: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawSingle(
    yangId: BigNumberish,
    zeroForOne: boolean,
    shares: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHIManager(overrides?: CallOverrides): Promise<string>;

    accruedCollectFees0(overrides?: CallOverrides): Promise<BigNumber>;

    accruedCollectFees1(overrides?: CallOverrides): Promise<BigNumber>;

    accruedProtocolFees0(overrides?: CallOverrides): Promise<BigNumber>;

    accruedProtocolFees1(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityToPosition(
      rangeIndex: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceToken0(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken1(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocol(
      amount0: BigNumberish,
      amount1: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      yangId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    depositSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    emergencyBurn(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<number>;

    feeTier(overrides?: CallOverrides): Promise<number>;

    getRange(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tickLower: number; tickUpper: number }>;

    getRangeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }
    >;

    getTotalLiquidityAmounts(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { total0: BigNumber; total1: BigNumber }
    >;

    harvestFee(overrides?: CallOverrides): Promise<void>;

    pool(overrides?: CallOverrides): Promise<string>;

    positionAmounts(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    removeAllLiquidityFromPosition(
      rangeIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    removeLiquidityFromPosition(
      rangeIndex: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    removeRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    swapPercentage(
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sweep(token: string, to: string, overrides?: CallOverrides): Promise<void>;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      yangId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawal0: BigNumber;
        withdrawal1: BigNumber;
      }
    >;

    withdrawSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CollectFee(uint256,uint256)"(
      feesFromPool0?: null,
      feesFromPool1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { feesFromPool0: BigNumber; feesFromPool1: BigNumber }
    >;

    CollectFee(
      feesFromPool0?: null,
      feesFromPool1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { feesFromPool0: BigNumber; feesFromPool1: BigNumber }
    >;

    "Deposit(uint256,uint256,uint256,uint256)"(
      yangId?: BigNumberish | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        yangId: BigNumber;
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Deposit(
      yangId?: BigNumberish | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        yangId: BigNumber;
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Swap(address,address,uint256,uint256,uint256)"(
      from?: null,
      to?: null,
      amountIn?: null,
      amountOut?: null,
      amountOutMin?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        from: string;
        to: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        amountOutMin: BigNumber;
      }
    >;

    Swap(
      from?: null,
      to?: null,
      amountIn?: null,
      amountOut?: null,
      amountOutMin?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        from: string;
        to: string;
        amountIn: BigNumber;
        amountOut: BigNumber;
        amountOutMin: BigNumber;
      }
    >;

    "Withdraw(uint256,address,uint256,uint256,uint256)"(
      yangId?: BigNumberish | null,
      to?: string | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        yangId: BigNumber;
        to: string;
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Withdraw(
      yangId?: BigNumberish | null,
      to?: string | null,
      shares?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, BigNumber],
      {
        yangId: BigNumber;
        to: string;
        shares: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;
  };

  estimateGas: {
    CHIManager(overrides?: CallOverrides): Promise<BigNumber>;

    accruedCollectFees0(overrides?: CallOverrides): Promise<BigNumber>;

    accruedCollectFees1(overrides?: CallOverrides): Promise<BigNumber>;

    accruedProtocolFees0(overrides?: CallOverrides): Promise<BigNumber>;

    accruedProtocolFees1(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityToPosition(
      rangeIndex: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceToken0(overrides?: CallOverrides): Promise<BigNumber>;

    balanceToken1(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocol(
      amount0: BigNumberish,
      amount1: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      yangId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyBurn(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeTier(overrides?: CallOverrides): Promise<BigNumber>;

    getRange(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRangeCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLiquidityAmounts(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    positionAmounts(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllLiquidityFromPosition(
      rangeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityFromPosition(
      rangeIndex: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    swapPercentage(
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweep(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      yangId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHIManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accruedCollectFees0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accruedCollectFees1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accruedProtocolFees0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accruedProtocolFees1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityToPosition(
      rangeIndex: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceToken0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceToken1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectProtocol(
      amount0: BigNumberish,
      amount1: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      yangId: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      exactAmount: BigNumberish,
      maxTokenAmount: BigNumberish,
      minShares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyBurn(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRange(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRangeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalAmounts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalLiquidityAmounts(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvestFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionAmounts(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllLiquidityFromPosition(
      rangeIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityFromPosition(
      rangeIndex: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRange(
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapPercentage(
      params: {
        tokenIn: string;
        tokenOut: string;
        interval: BigNumberish;
        slippageTolerance: BigNumberish;
        percentage: BigNumberish;
        sqrtRatioX96: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      token: string,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV3MintCallback(
      amount0Owed: BigNumberish,
      amount1Owed: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      yangId: BigNumberish,
      shares: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSingle(
      yangId: BigNumberish,
      zeroForOne: boolean,
      shares: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
